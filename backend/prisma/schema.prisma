generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum CodeOperation {
    EMAIL_VALIDATION
}

enum UserStatus {
    ONLINE
    OFFLINE
}

enum DMType {
    SINGLE
    GROUP
}

model User {
    id          Int           @id @default(autoincrement())
    displayName String
    username    String        @unique
    email       String        @unique
    password    String
    dateOfBirth DateTime
    active      Boolean       @default(false)
    status      UserStatus    @default(OFFLINE)
    avatar      File?
    Codes       Codes[]
    sockets     UserSockets[]
    userDms     UserDm[]

    Friend1         Friendship[]        @relation("Friend1")
    Friend2         Friendship[]        @relation("Friend2")
    friendSender    PendingFriendship[] @relation("friendSender")
    friendRecipient PendingFriendship[] @relation("friendRecipient")
    blocked         Block[]             @relation("blocked")
    blockedBy       Block[]             @relation("blockedBy")
}

model UserSockets {
    socketId String @id
    userId   Int

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
    sid     String   @id
    expires DateTime
    data    String
}

model Codes {
    id        Int           @id @default(autoincrement())
    operation CodeOperation
    code      String
    createdAt DateTime      @default(now())
    userId    Int

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Friendship {
    id        Int      @id @default(autoincrement())
    sinceDate DateTime @default(now())
    user1Id   Int
    user2Id   Int

    user1 User @relation("Friend1", references: [id], onDelete: Cascade, fields: [user1Id])
    user2 User @relation("Friend2", references: [id], onDelete: Cascade, fields: [user2Id])

    @@unique([user1Id, user2Id], name: "unique_user_combination")
}

model PendingFriendship {
    id          Int      @id @default(autoincrement())
    sinceDate   DateTime @default(now())
    senderId    Int
    recipientId Int

    sender    User @relation("friendSender", references: [id], onDelete: Cascade, fields: [senderId])
    recipient User @relation("friendRecipient", references: [id], onDelete: Cascade, fields: [recipientId])

    @@unique([senderId, recipientId], name: "unique_user_combination")
}

model Block {
    id          Int      @id @default(autoincrement())
    sinceDate   DateTime @default(now())
    blockedId   Int
    blockedById Int

    blocked   User @relation("blocked", references: [id], onDelete: Cascade, fields: [blockedId])
    blockedBy User @relation("blockedBy", references: [id], onDelete: Cascade, fields: [blockedById])

    @@unique([blockedId, blockedById], name: "unique_user_combination")
}

model File {
    id           Int      @id @default(autoincrement())
    filename     String
    fieldname    String
    filePath     String
    url          String
    mimeType     String
    fileSize     Int
    uploadedById Int      @unique
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    uploadedBy User @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
}

model DM {
    id        String    @id
    createdAt DateTime  @default(now())
    entersAt  DateTime
    type      DMType
    Message   Message[]
    userDms   UserDm[]
}

model UserDm {
    id     Int    @id @default(autoincrement())
    userId Int
    dmId   String

    user User @relation(fields: [userId], references: [id])
    dm   DM   @relation(fields: [dmId], references: [id])

    @@unique([userId, dmId])
}

enum MessageContentType {
    TEXT
    IMAGE
}

model Message {
    id       Int      @id @default(autoincrement())
    createAt DateTime @default(now())
    dmId     String
    replyId  Int?     @unique
    contentType  MessageContentType
    content  

    dm        DM       @relation(fields: [dmId], references: [id])
    reply     Message? @relation("replyMessage", fields: [replyId], references: [id])
    repliedTo Message? @relation("replyMessage")
}
