generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum CodeOperation {
    EMAIL_VALIDATION
}

enum UserStatus {
    ONLINE
    OFFLINE
}

model User {
    id          Int        @id @default(autoincrement())
    displayName String
    username    String     @unique
    email       String     @unique
    password    String
    dateOfBirth DateTime
    active      Boolean    @default(false)
    status      UserStatus @default(OFFLINE)

    Codes          Codes[]
    Friend1        Friendship[]        @relation("Friend1")
    Friend2        Friendship[]        @relation("Friend2")
    Block1         Block[]             @relation("Block1")
    Block2         Block[]             @relation("Block2")
    PendingFriend1 PendingFriendship[] @relation("PendingFriend1")
    PendingFriend2 PendingFriendship[] @relation("PendingFriend2")
    files          File[]
    sockets        UserSockets[]
}

model UserSockets {
    socketId     String @id
    userId Int

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
    sid     String   @id
    expires DateTime
    data    String
}

model Codes {
    id        Int           @id @default(autoincrement())
    operation CodeOperation
    code      String
    createdAt DateTime      @default(now())
    userId    Int
    sessionId String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Friendship {
    id        Int      @id @default(autoincrement())
    sinceDate DateTime @default(now())
    user1Id   Int
    user2Id   Int

    user1 User @relation("Friend1", references: [id], onDelete: Cascade, fields: [user1Id])
    user2 User @relation("Friend2", references: [id], onDelete: Cascade, fields: [user2Id])

    @@unique([user1Id, user2Id], name: "unique_user_combination")
}

model PendingFriendship {
    id          Int      @id @default(autoincrement())
    sinceDate   DateTime @default(now())
    senderId    Int
    recipientId Int

    user1 User @relation("PendingFriend1", references: [id], onDelete: Cascade, fields: [senderId])
    user2 User @relation("PendingFriend2", references: [id], onDelete: Cascade, fields: [recipientId])

    @@unique([senderId, recipientId], name: "unique_user_combination")
}

model Block {
    id        Int      @id @default(autoincrement())
    sinceDate DateTime @default(now())
    user1Id   Int
    user2Id   Int

    user1 User @relation("Block1", references: [id], onDelete: Cascade, fields: [user1Id])
    user2 User @relation("Block2", references: [id], onDelete: Cascade, fields: [user2Id])

    @@unique([user1Id, user2Id], name: "unique_user_combination")
}

model File {
    id           Int      @id @default(autoincrement())
    filename     String
    fieldname    String
    filePath     String
    url          String
    mimeType     String
    fileSize     Int
    uploadedById Int
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    uploadedBy User @relation(fields: [uploadedById], references: [id])
}
